{"version":3,"sources":["modules/Preview/index.js","modules/Markdown/Markdown.component.js","modules/VerticalHandler/index.js","mock/projectpage.js","Editor/Editor.component.js","utils/api.js","mock/searchResults.js","Search/Search.component.js","View/View.component.js","App.js","serviceWorker.js","index.js"],"names":["markdown","width","className","style","source","setMarkdown","onChange","e","value","target","setViewWidths","onDrag","event","screenWidth","window","outerWidth","mousePosition","clientX","left","Math","round","right","props","useState","viewWidths","onClick","body","alert","console","log","VerticalHandler","Preview","id","title","description","linkStyle","position","top","Item","to","ListGroup","Search","searchResults","setResults","Button","variant","Form","onSubmit","preventDefault","setTimeout","results","Group","controlId","Container","marginTop","Row","Col","Label","Control","type","placeholder","length","map","result","key","bannerStyle","height","editStyle","View","docId","useEffect","fetchMarkdown","a","fetch","then","response","projectPage","path","render","match","params","App","exact","component","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7a90742.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport './style.scss';\r\n\r\nexport default ({markdown, width}) => (\r\n  <div className=\"preview__wrapper\" style={{width: width ? width + '%' : '100%'}}>\r\n    <ReactMarkdown source={markdown} />\r\n  </div>\r\n)","import React from 'react';\r\n\r\nexport default ({markdown, setMarkdown, width}) => {\r\n  const handleChange = function(e) {\r\n    const { value } = e.target;\r\n    setMarkdown(value);\r\n  };\r\n  return (\r\n    <textarea className=\"editor__markdown\"  \r\n      style={{width: width + '%'}} \r\n      onChange={handleChange}\r\n      value={markdown}\r\n    >\r\n    </textarea>\r\n  )\r\n};","import React from 'react';\r\n\r\nexport default ({setViewWidths}) => {\r\n  const handleDrag = function(event) {\r\n    const available = 98;\r\n    const screenWidth = window.outerWidth;\r\n    const mousePosition = event.clientX;\r\n    if(mousePosition === 0) return;\r\n    const left = Math.round(mousePosition/screenWidth * 100);\r\n    setViewWidths({left, right: available - left});\r\n  }\r\n  return (\r\n  <div onDrag={handleDrag} className=\"editor__vertical-handler\"></div>\r\n)};","export default `# Vision and Eye Health Surveillance (VEHSS)\r\n\r\n![Insert VEHSS logo here](https://github.com/Abshah600/cautious-octo-eureka/blob/master/VEHSSlogo.png?raw=true)\r\n##### Explore the interactive application here: https://www.cdc.gov/visionhealth/vehss/index.html\r\n##### Explore the [VEHSS Data Portal](https://chronicdata.cdc.gov/browse?category=Vision+%26+Eye+Health) to download datasets and create visualizations.\r\n___\r\n### About the application \r\nCDC’s Vision Health Initiative (VHI) and NORC at the University of Chicago partnered to develop the National Vision and Eye Health Surveillance System (VEHSS). VEHSS leverages new and existing data sources to help health professionals, researchers, policy makers, and patients understand the scope of vision loss, eye disorders, and eye care services in the United States. VEHSS is intended to grow and improve over time based on input and needs of the vision health community.  \r\n\r\nThe goals of the system are to:  \r\n- Identify and collect existing sources of information on vision and eye health.\r\n- Create case definitions to analyze data consistently.\r\n- Analyze data to estimate:\r\n    - The prevalence of eye disorders and disabilities.\r\n    - The use of eye-health services.\r\n    - Health disparities in visual health treatment and outcomes.\r\n- Investigate methods to leverage multiple existing data sources to create new estimates of the prevalence of vision loss and eye disease.\r\n- Disseminate the information developed by the system to key stakeholders, and respond to feedback to continually improve the quality and usefulness of the system. \r\n\r\n**Who is currently working on this project?:**\r\n\r\n Name | Role | Email\r\n--- | --- | ---|\r\nAmi Shah | Data Analyst | IAmAwesome@ngc.com\r\nDana Bowlin | Project Manager | IRockPMing@ngc.com\r\nNikolai Panov  | Database Analyst | MDfixer@ngc.com\r\nJoan Braithwaite | Data Analyst | BackUp@ngc.com\r\nPatricia Jordan | QA | StopBuggingMe@ngc.com\r\nJill Donnelly | UI/UX | MakeMePretty@ngc.com\r\nLapina McDowell | Business Analyst | LiveByMyRules@ngc.com\r\nSteven Nguyen | Developer | DevDoc@ngc.com\r\n\r\n___\r\n\r\n###### Have questions about VEHSS data? [Contact us](mailto:ddtpubsmailbox@cdc.gov)!`","import React, {useState, useEffect} from 'react';\r\nimport {\r\n  Markdown, \r\n  VerticalHandler, \r\n  Preview\r\n} from '../modules';\r\nimport { saveMarkdownFiles, getMarkdown } from '../utils/api';\r\nimport './styles.scss';\r\n\r\nexport default (props) => {\r\n  const [markdown, setMarkdown] = useState(props.markdown);\r\n  const [viewWidths, setViewWidths] = useState({left: 49, right: 49});\r\n\r\n  const publish = function() {\r\n    saveMarkdownFiles(markdown, 'Sally');\r\n  }\r\n\r\n  return (\r\n    <div className=\"editor\">\r\n      <button style={{left: viewWidths.left - 6 + '%'}} onClick={publish}>Publish</button>\r\n      {/* setting inline style. Eventually these will be set by a drag handler on the verticalhandler */}\r\n      <Markdown {...{markdown, setMarkdown}} width={viewWidths.left}/>\r\n      <VerticalHandler {...{setViewWidths}}/>\r\n      <Preview {...{markdown}} width={viewWidths.right}/>\r\n    </div>\r\n  );\r\n}","//const ES_API = \"somewhereongoogle.com\";\r\nimport projectPage from '../mock/projectpage';\r\n\r\nfunction toJSON(response) {\r\n  // why do this: https://www.tjvantoll.com/2015/09/13/fetch-and-errors/\r\n  if(!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport function saveMarkdownFiles(body, user) {\r\n  alert(user + ' your markdown is all saved!');\r\n  console.log(body);\r\n  //return fetch(ES_API).then(toJSON);\r\n}\r\n\r\nexport function getMarkdown(docId) {\r\n  return fetch('https://jsonplaceholder.typicode.com/todos/1').then(response => {\r\n    return projectPage\r\n  })\r\n}","export default [\r\n  {\r\n    id: 1234,\r\n    title: 'Visision and Eye Health Surveillance (VEHSS)',\r\n    description: 'CDC’s Vision Health Initiative (VHI) and NORC at the University of Chicago partnered to develop the National Vision and Eye Health Surveillance System (VEHSS). VEHSS leverages new and existing data sources to help health professionals, researchers, policy makers, and patients understand the scope of...'\r\n  },\r\n  {\r\n    id: 1235,\r\n    title: 'Nathional Youth Tobacco Survey',\r\n    description: 'Pilot to electronically collect youth tobacco survey results.'\r\n  }\r\n]","import React, { useState } from 'react';\r\nimport {Form, Container, Row, Col, Button, ListGroup} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport results from '../mock/searchResults';\r\n\r\nconst linkStyle = {position: 'absolute', top: '20px', right: '20px'}\r\n\r\nconst Item = ({id, title, description}) => ( \r\n  <Link to={`/view/${id}`}>\r\n    <ListGroup.Item>\r\n      <h1>{title}</h1>\r\n      <p>{description}</p>\r\n    </ListGroup.Item>\r\n  </Link>\r\n);\r\n\r\nfunction Search() {\r\n  const [searchResults, setResults] = useState([])\r\n\r\n  function search(event) {\r\n    event.preventDefault();\r\n    setTimeout(() => {\r\n      setResults(results)\r\n    }, 1000);\r\n  }\r\n \r\n  return (\r\n    <>\r\n      <Link style={linkStyle} to=\"/new\"><Button variant=\"outline-info\">Add New</Button></Link>\r\n      <Form onSubmit={search}>\r\n        <Form.Group controlId=\"searchTerm\">\r\n          <Container style={{width: '300px', marginTop: '20vh'}} >\r\n            <Row className=\"justify-content-center text-center\">\r\n              <Col>\r\n                <Form.Label><h1>Wikied</h1></Form.Label>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"justify-content-sm-center\">\r\n              <Col>\r\n                <Form.Control type=\"input\" placeholder=\"Search\"></Form.Control>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Form.Group>\r\n      </Form>\r\n      {!!searchResults.length &&\r\n        <ListGroup>\r\n          {searchResults.map(result => <Item key={result.id} {...result} />)}\r\n        </ListGroup>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Search;","import React, {useState, useEffect} from 'react';\r\nimport Preview from '../modules/Preview';\r\nimport Editor from '../Editor';\r\nimport {Switch, Route, Link} from 'react-router-dom';\r\nimport {Button} from 'react-bootstrap';\r\nimport { getMarkdown } from '../utils/api';\r\n\r\nconst bannerStyle = {height: '80px'};\r\nconst linkStyle = {position: 'absolute', left: '20px', top: '20px'};\r\nconst editStyle = {position: 'absolute', right: '20px', top: '20px'};\r\n\r\nfunction View(props) {\r\n  const [markdown, setMarkdown] = useState('');\r\n  const { docId } = props;\r\n  useEffect(() => {\r\n    const fetchMarkdown = async () => {\r\n      const markdown = await getMarkdown(docId);\r\n      setMarkdown(markdown);\r\n    }\r\n    if(!markdown) {\r\n      if(docId) {\r\n        fetchMarkdown();\r\n      }\r\n    }\r\n  }, [markdown, docId])\r\n\r\n  return (\r\n    <>\r\n      <div style={bannerStyle}>\r\n        <Link style={linkStyle} to=\"/\"><Button variant=\"outline-info\">{`< Back to Search`}</Button></Link>\r\n      </div>\r\n      <Switch>\r\n        <Route path=\"/view/:docId/edit\" render={({match}) => (\r\n          <Editor markdown={markdown} />\r\n        )} />\r\n        <Route path=\"/view/:docId\" render={({match}) => (\r\n          <>\r\n            <Link style={editStyle} to={`/view/${match.params.docId}/edit`}><Button variant=\"outline-primary\">{`Edit`}</Button></Link>\r\n            <Preview markdown={markdown} />\r\n          </>\r\n          \r\n        )} />\r\n      </Switch>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default View;\r\n","import React from 'react';\r\nimport Editor from './Editor';\r\nimport Search from './Search';\r\nimport View from './View';\r\nimport {Switch, Route} from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/new\" render={() => {\r\n        return <Editor markdown='# Add Markdown Here' />\r\n      }}/>\r\n      <Route path=\"/view/:docId\" render={({match}) => (\r\n        <View docId={match.params.docId} />\r\n      )} />\r\n      <Route exact path=\"/\" component={Search} />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}